require 'rubygems'
require 'rake/clean'
require 'fileutils'
require 'git'

task :default => [:update_docs, :doxygen, :javadoc, :build, :clean]

CLEAN.include("**/.DS_Store")

desc "Build the website from source"
task :build do
  puts "Building website from static source"
  result = system("middleman build --clean --verbose")
  if result
    puts "Successfully generated the site, please commit your changes"
  else
    puts "An error was encountered when generating the site"
  end
end

desc "Update the latest docs from the Apache Mesos codebase"
task :update_docs do
  puts "Updating latest documentation from the Apache Mesos codebase"

  puts "Updating docs to the latest version"
  prepare_docs('latest')

  g = Git.open('../')
  current_branch = g.current_branch

  # Only prepare docs for final versions, not release candidates
  tags = g.tags.select{|tag| tag.name[/^[0-9]+\.[0-9]+\.[0-9]+$/]}.map{|tag| tag.name }

  for tag in tags do
    # Exclude older versions without documentation
    if ["0.10.0", "0.11.0", "0.12.0", "0.12.1", "0.13.0",
        "0.14.0", "0.14.1", "0.14.2", "0.15.0"].include? tag
      next
    end

    # Always restore to the original branch in case of error
    begin
      g.checkout(tag)
      puts "Updating docs for version #{tag}"
      prepare_docs(tag)
    ensure
      g.checkout(current_branch)
    end
  end

  # Copy the images from the docs
  FileUtils.mkdir_p("source/assets/img/documentation/")
  FileUtils.rm_f(Dir.glob("source/assets/img/documentation/*"))
  FileUtils.cp_r(Dir.glob("../docs/images/*"), File.expand_path("source/assets/img/documentation/"))

  puts "Documentation updated"
end

desc "Generate javadoc from the Java source files in the codebase"
task :javadoc do
  proto_java_folder = "../build/src/java/generated"
  if not File.directory?(proto_java_folder)
    raise "Please make sure Java proto files are generated in #{proto_java_folder} folder."
  end
  # TODO: add version to the path. Uses 'current' for now.
  system("javadoc -d source/api/latest/java -sourcepath ../src/java/src:#{proto_java_folder} org.apache.mesos")
end

desc "Generate doxygen from the C++ source files in the codebase"
task :doxygen do
  FileUtils.rm_rf(Dir.glob("source/api/latest/c++"))
  FileUtils.mkdir_p("source/api/latest")
  system("doxygen ../Doxyfile && mv doxygen/html source/api/latest/c++ && rm -rf doxygen")
end

desc "Clean up generated documents"
task :clean_docs do
  FileUtils.rm_rf(Dir.glob("source/api"))
  FileUtils.rm_rf(Dir.glob("source/documentation"))
  FileUtils.rm_rf(Dir.glob("source/assets/img/documentation"))
end

desc "Run the site in development mode. Preview available at http://localhost:4567/"
task :dev do
  system("middleman server")
end

def prepare_docs(version)
  docs_dir = File.join(File.dirname(__FILE__), "source/documentation")

  FileUtils.mkdir_p("source/documentation/#{version}/")
  FileUtils.rm_rf(Dir.glob("source/documentation/#{version}/*"))
  FileUtils.cp_r(FileList['../docs/**'].exclude("../docs/images"), File.expand_path("source/documentation/#{version}/"))

  # Due to a limitation in middleman, it doesn't support .md files
  # named (e.g.  state.json.md). Middlman would generate an *html* file
  # called state.json from this instead of generating the standard
  # state.json/index.html like it does for other .md files.
  puts "Migrating markdown files with paths matching **/*.json.md to **/*.json/index.md"
  Dir.chdir("#{docs_dir}/#{version}/") {
    Dir.glob('**/*.json.md').each { |doc|
      docdir = doc.chomp(".md")
      FileUtils.mkdir(docdir)
      FileUtils.mv(doc, docdir + "/index.md")
    }
  }

  puts "Parse documentation files to removing md extension in any links"
  Dir.chdir("#{docs_dir}/#{version}/") {
    Dir.glob('**/*.md').each { |doc|
      puts "Working on version #{version} of #{doc}..."

      # TODO(klueska): we really need to get rid of this complicated
      # regular expression and add in some logic that is more easily
      # understood.
      docdir = File.dirname(doc)
      IO.write(doc, File.open(doc) { |f|
        f.read
          .gsub(/\(([^(]+?)(?:\/index)?\.md(\#.+?)?\)/, "(/documentation/#{version}/#{docdir}/" + '\1/\2)')
          .gsub(/\(images\/(.*)\)/, '(/assets/img/documentation/\1)')
          .gsub(/\/latest\//, "/#{version}/")  # Some versions have "latest" hard coded instead of their version number
      })
    }
  }

  puts "Moving documentation index to its own '#{version}' directory"
  FileUtils.mv("source/documentation/#{version}/home.md", "source/documentation/#{version}.html.md")
end
